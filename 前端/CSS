# CSS

## 概念

### **引入**

开始的时候，由于用户交互体验的加强，HTML不仅用于描述结构，也开始描述外在表现。这种随便的做法暴露出了严重的问题，1.由于 HTML既写结构又写样式，导致页面缺乏结构性，降低了网页的可访问性，2.页面维护越来越困难

1995年w3c开始发布CSS的计划

### CSS概述

- CSS指层叠样式表（级联样式表）

  - 主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。

  - CSS***以HTML为基础***，提供了丰富样式功能。

### **CSS引用**

  在HTML中引入CSS有3种方式：

  - 外部样式表
  - 内部样式表
  - 内联样式表

  #### ***1.外部样式表***

 当样式需要应用于很多页面时，外部样式表将是理想的选择

~~~html
 当样式需要应用于很多页面时，外部样式表将是理想的选择

 ```html
 <head>
 <link rel="stylesheet" type="text/css" href="mystyle.css"
 </head>
     
 ```

 浏览器会从文件`mystyle.css`中读到样式声明，并根据它来格式文档。

 样式表文件的例子：

 ```html
 
 hr{color:sienna;}
 p{margin-left:20px;}
 body{backgroud-image:url("images/back40.gif");}
 
 ```
~~~

  #### ***2.内部样式表***

 当单个文档需要特殊的样式时，就应该使用内部样式表。可以使用`<style>`标签在文档头部定义内部样式表，就像这样：

~~~html
 当单个文档需要特殊的样式时，就应该使用内部样式表。可以使用`<style>`标签在文档头部定义内部样式表，就像这样：

 ```html
 <head>
 <style>
     hr{color:sienna;}
 	p{margin-left:20px;}
 	body{backgroud-image:url("images/back40.gif");}
 </style>   
 </head>
 ```
~~~


​     

  #### ***3.内联样式表***

要使用内联样式表，需要自带相关的标签内使用样式`(style)`属性。style属性可以包含任何CSS属性，本例展示如何改变段落的颜色和左外边距：

~~~html
 要使用内联样式表，需要自带相关的标签内使用样式`(style)`属性。style属性可以包含任何CSS属性，本例展示如何改变段落的颜色和左外边距：

 ```html
 <p style="color:sienna;margin-left:20px">This is a paragraph.</p>
 ```
~~~
####**层叠次序**

当同一个HTML元素被不止一个样式定义时，会使用哪个样式呢？

***内联样式（在HTML 元素内部）拥有最高的优先权***，这意味着它将优先于以下的样式声明：

- 内联样式> 标签中的样式声明> 外部样式表中的样式声明(或者浏览器中的样式声明（缺省值）)

  提示:如果你使用了外部文件的样式在<head>中也定义了该样式，则内部样式表会取代外部文件的样式。

  其实总结来说，就是--***就近原则（离被设置元素越近优先级别越高）。***

## 选择器

选择器，说白了就是用一种方式把你想要的那一个标签选中，然后让你定义该标签的CSS样式

### 标签选择器

标签选择器, 就是通过`标签名`把html重点代码(标签) 和 css 对应(标签名) 样式结合起来

![image-20200505133456564](C:%5CUsers%5Cheihei%5CDesktop%5CTypora%5C%E5%AD%A6%E4%B9%A0%5C%E7%8E%8B%E9%81%93%5C%E5%89%8D%E7%AB%AF%5Cimage-20200505133456564.png)

### 类选择器(最常用)

类选择器: 就是通过标签中的类名, (class属性指向的类名)  来关联css样式

类选择器的写法:  是以 `.xxx`

![image-20200505133601433](C:%5CUsers%5Cheihei%5CDesktop%5CTypora%5C%E5%AD%A6%E4%B9%A0%5C%E7%8E%8B%E9%81%93%5C%E5%89%8D%E7%AB%AF%5Cimage-20200505133601433.png)

### ID选择器

Id选择器:  通过html元素的id属性,  把html元素和css样式关联起来, 

Id: 对于每一个html元素来说, 都可以有一个属性id, 并且这个id是唯一的, 可以唯一标识这个html源

Id选择器的写法就是,  以`#xxx`来写

![image-20200505133543138](C:%5CUsers%5Cheihei%5CDesktop%5CTypora%5C%E5%AD%A6%E4%B9%A0%5C%E7%8E%8B%E9%81%93%5C%E5%89%8D%E7%AB%AF%5Cimage-20200505133543138.png)

### 类和ID选择器的区别

- 相同点：可以应用与任何元素
- 不同点：
  1. ID选择器只能在文档中使用一次，而类选择器可以使用多次
  2. 可以使用类选择器词列表方法为一个元素同时设置多个样式

### 通用选择器（通配符选择器）

通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html 中所有标签元素，
如下使用下面代码使用html 中任意标签元素字体颜色全部设置为红色：

```html
*{color:red;}
```

### 样式优先级

内联样式表（标签内部）> 嵌入样式表（当前文件中）> 外部样式表（外部文件中）

### ！important

为某些样式设置具有最高权值

```html
p{color:red!important;}
p{color:green;}
<p class="first">三年级时，我还是一个<span>胆小如鼠</span>的小女孩。</p>
```

这时p 段落中的文本会显示的red 红色。
注意：!important 要写在分号的前面

​              Class---à 是针对于某一类符合条件的class

## 盒子模型

在“CSS 盒子模型”理论中，所有页面中的元素都可以看成一个盒子，并且占据着一定
的页面空间。

###四个属性

每个元素都看成一个盒子，盒子模型是由content（内容）、padding（内边距）、margin（外边距）和border（边框）这四个属性组成的。
- `content （内容）`可以是文字或图片
- `padding （内边距）`用于定义内容与边框之间的距离
- `border （边框）`元素边框
- `margin （外边距）`用于定义页面中元素与元素之间的距离


![image-20200505134444965](C:%5CUsers%5Cheihei%5CDesktop%5CTypora%5C%E5%AD%A6%E4%B9%A0%5C%E7%8E%8B%E9%81%93%5C%E5%89%8D%E7%AB%AF%5Cimage-20200505134444965.png)

###宽高

此外，在盒子模型中，还有宽度width和高度height 两大辅助性属性。

- width 和height 指的是<u>内容区域</u>的宽度和高度。

- 一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界

![image-20200505135028323](C:%5CUsers%5Cheihei%5CDesktop%5CTypora%5C%E5%AD%A6%E4%B9%A0%5C%E7%8E%8B%E9%81%93%5C%E5%89%8D%E7%AB%AF%5Cimage-20200505135028323.png)

增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。
记住，是所有的元素都可以看做一个盒子！

### 背景色

背景色 = 元素内容大小 + 内边距

### 边框

border只设置宽度是不会起效果的，需要配合`solid`使用

~~~html
border: 200px solid;
~~~

### 写法

```html
margin: 100px 100px 0 0;
设置的顺序是：上 右 下 左(顺时针)
margin: 100px 100px;
设置的顺序是：上下 左右(顺时针)
```



### 盒子模型的外边距合并

在html中, 有<u>*垂直方向*</u> 两个元素的外边距 <u>*紧相邻*</u>, 那么就会产生一种现象--- **外边距合并**

- 合并的结果,是按照紧相邻的*外边距最大*的那个值进行合并

- 只发生在垂直方向

![image-20200506000530908](C:%5CUsers%5Cheihei%5CDesktop%5CTypora%5C%E5%AD%A6%E4%B9%A0%5C%E7%8E%8B%E9%81%93%5C%E5%89%8D%E7%AB%AF%5Cimage-20200506000530908.png)



![image-20200506000544893](C:%5CUsers%5Cheihei%5CDesktop%5CTypora%5C%E5%AD%A6%E4%B9%A0%5C%E7%8E%8B%E9%81%93%5C%E5%89%8D%E7%AB%AF%5Cimage-20200506000544893.png)



## 布局和浮动

### 标准文档流

在html页面, html元素(标签) 按照元素特性(行,块) 从左向右,从上向下顺序排列, 叫**标准文档流**

### 浮动float

就是把一个html元素从标准文档流中脱离出来

float被设计出来的初衷是用于:文字环绕效果

现在：用来布局

- **浮动的特性**

  1：浮动只影响后面的元素

  2：浮动找浮动，不浮动找不浮动(看同层的关系)

  3：浮动以元素顶部为基准对齐

  4：浮动可是实现模式转换（eg:span 设置浮动可以设置宽高）

  5：让块级元素在一行显示

- **清除浮动**

  盒子的撑开和塌陷

  出现这种情况，我们需要清除浮动

  - 当父容器没有设置高度，里面的盒子没有设置浮动的情况下会将父容器的高度撑开。

  - 一旦父容器中的盒子设置浮动，脱离标准文档流，父容器立马没有高度，下面的盒子会跑到浮动的盒子下面。

  

  **谁受到浮动影响, 就在谁上面清除**

  Clear: 谁受影响谁清除
  
  - left:在左侧不允许浮动元素。
- right:在右侧不允许浮动元素。
  - both:在左右侧不允许浮动元素。
  
  ```html
.text{clear:both}
  ```
  
  

## 定位

什么是定位? 就是一个html元素位置的确定

正常来说(复合标准文档流)-----定位-------自左向右,自上而下有序排列

怎么改变一个元素的位置(元素本来应该符合标准文档流)

### 默认定位(Static)

`position: static;`

元素框正常生成

- 默认值。没有定位，元素出现在正常的文档流中（忽略 top, bottom, left, right 或者 z-index 声明）。 



### 相对定位(Relative)

元素框偏移某个距离。

- 相对定位的元素，相对于其正常位置进行定位，要结合方位元素设置
- 并不脱离文档流

### 绝对定位(Absolute)

元素框从文档流完全删除，

- 绝对定位绝对不占空间位置（与浮动一样）
- 脱离文档
- 元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定
- 生成绝对定位的元素，相对于非 static 定位的第一个(自内向外)父元素进行定位。
- 当一个盒子包含在另一个盒子中，所有父级盒子未设置定位，子盒子以浏览器左上角为基准设置位置； 当父盒子设置定位，子盒子以父盒子左上角为基准设置位置

### Fixed

绝对定位的元素，相对于浏览器窗口进行定位

- 生成绝对定位的元素，相对于浏览器窗口进行定位。

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <style>
        .div1{
            width: 100%;
            height: 3000px;
            background: #FF0000;
        }
        .div2{
            width: 100%;
            height: 30px;
            background: silver;
            position: fixed;
        }
        body{
            padding: 0;
            margin: 0;
        }
    </style>
</head>
<body>

<div class="div1">
    <div class="div2">

    </div>

    <div style="height: 100px; width: 100px; background: #0000FF">
        123
    </div>

</div>

</body>
</html>

```



### z-index

z-index:z-index 仅能在定位元素上奏效, Static 无效（例如 position:absolute;）

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <style>
        .div1{
            width: 100%;
            height: 3000px;
            background: #FF0000;
        }
        .div2{
            width: 100%;
            height: 30px;
            background: silver;
            position: fixed;
            z-index: 99;
        }
        body{
            padding: 0;
            margin: 0;
        }
    </style>
</head>
<body>

<div class="div1">
    <div class="div2">

    </div>

    <div style="height: 100px; width: 100px; background: #0000FF">
        123
    </div>


    <div style="width: 300px;
                height: 300px;
                background: #00FF00;
                position: absolute;
                top:300px;
            ">

    </div>

</div>

</body>
</html>

```



## overflow

overflow 属性规定当内容溢出元素框时发生的事情

- 属性

  Visible:默认值。内容不会被修剪，会呈现在元素框之外。

  Hidden:内容会被修剪，并且其余内容是不可见的。

  Scroll:内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。

  Auto:如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。

- 注意:

  1：display:none 元素隐藏不占位置

  2：overflow:hidden; 将超出部分的元素隐藏

  3：visibility:hidden; 元素隐藏占位置

## 注意

- 主要长宽单位

  - px 像素

  - % 相对于父元素的大小

- line-height(设置行高)

- 浏览器默认字体大小为:16px

- 浏览器默认行高：18px

- 行高=上间距+文字大小+下间距